"""
In this file, you can handle the whole category building and adding instance, deleting instance;
writing to a file; storing the category names at a place and recalling them later.. .

"""
import os.path
import csv
# import time
# import Counter
import datetime
import sys
import time

import pandas as pd
import numpy as np


def check_shape(input_time):
    # print("input",input_time)
    # digit_len = int(len(input_time))
    # print("digit_len", digit_len)
    global split_point, min, sec

    for i, c in enumerate(input_time):
        # print(i,c)
        if c == (":" or ","):
            min = input_time[:i]
            sec = input_time[i + 1:]
            # print("min sec ", min, sec)
            split_point = input_time[i]
            return split_point, min, sec


Category_general = []


class Category:

    def __init__(self,
                 category_name=None,
                 category_names=None,
                 time_required=None,
                 req_minutes=None,
                 time_spent=None,
                 final_date=1,
                 daily_sum=None):

        if category_name is None:
            category_name = category_names

        self.category_name = category_name
        self.time_required = time_required
        self.req_minutes = req_minutes  # the required minutes to fill for a week
        self.time_spent = time_spent  # time_spent will be filled by the function called pomodoro
        self.final_date = final_date
        self.daily_sum = daily_sum

    def read_the_categories(self):
        """
		This function, reads the stored categories from the given CSV file.
		:returns Category object and list of them
		"""

        lines = [None]

        with open("categories.csv", "r") as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=',')

            for i, lines in enumerate(csv_reader):
                # print(i, lines)

                if i == 0:
                    # if the file is empty, ignore it.
                    pass
                else:
                    Category_general.append(
                        Category(category_name=lines[0],
                                 time_required=lines[1],
                                 req_minutes=lines[2],
                                 time_spent=lines[3],
                                 final_date=lines[4]))
            # print(Category_general)
            # print("[read the categories] ->", Category_general)
            #      Category object,  list
            return Category_general, lines

    def check_categories(self, name, line_number=None):
        """
        This function gets the category names from the file and compare with the existing category names.
        So, it makes sure that you don't add two categories with the same name.
        :returns True or False

		Make sure that the category names are used
		if the_names is None:
			the_names = Category_general
			# sTODO: [SOLVED] this place needs some attention later, not working properly
		"""
        if len(Category_general) == 0:  # meaning, the list is empty and there is no other name to compare
            print("[check categories]The category name is successful!")
            # since there is no other category name to compare, it is always true if the list is empty.
            return True

        else:
            for index in range(len(Category_general)):
                # print("[check categories]cat", cat)
                print("[check_categories]name", name,
                      "cat.category_name", Category_general[index].category_name,
                      "index", index)

                if (name == Category_general[index].category_name) and (
                        line_number - index != 0):  # meaning the last entered one is an exception
                    print("You entered an existing category")
                    print("please check the name and enter again...")
                    print("you entered", name, "and cat.catname :", Category_general[index].category_name)
                    name = str(input("the name of the category again..."))

                    # if the new category is safe to add
                    if name != Category_general[index].category_name:
                        print("[check categories]The category name is successful!")
                        return True
                    else:
                        print("[check categories]some error occured!")
                else:
                    print("[check categories]The category name is successful!")
            return True

    def build_the_category(self):  # , name=None):
        """
		This function builds the categories and their values
		:param name:
		:return:Category_general [list of categories]
		"""

        # if name is None:
        # print("[build category],The name of the category you wanted to add.. ")
        # name = str(sys.argv)
        name = str(input("[build category],The name of the category you wanted to add.. "))  # Getting a name to check

        # Here, we need to check the category is already added or not.
        if self.check_categories(name=name) is True:  # meaning, this name is not used before, it is safe to add
            print("[build_the_category] Enter the details of the category below")
            weeks_required = int(
                input("\nWhat is the total required weeks to handle it, if you don't know, type it as 1...\n "))

            time_required = str(input("What is the total required time to handle it (hh:mm)...\n " +
                                      "if you don't know in total press 2 to add weekly hours\n " +
                                      "otherwise press 3"))

            if time_required == "2":  # meaning, the category member has no total hours
                time_required = str(input("What is the required time to handle it for a week (hh:mm)...?"))
                _, h_req, m_req = check_shape(time_required)
                req_minutes = (int(h_req) * 60) + int(m_req)

                # add to the category list
                Category_general.append(
                    Category(category_name=name, time_required=time_required, req_minutes=req_minutes,
                             final_date=weeks_required))

            elif time_required != "2":  # meaning, the category member has total hours
                _, h_req, m_req = check_shape(time_required)
                req_minutes = (int(h_req) * 60) + int(m_req)
                print("req_minutes", req_minutes)

                total_minutes_per_week = float(req_minutes / weeks_required)
                print(total_minutes_per_week, "  total_minutes_per_week")

                req_minutes_per_week = total_minutes_per_week

                # add to the category list
                Category_general.append(
                    Category(category_name=name, time_required=time_required, req_minutes=req_minutes_per_week,
                             final_date=weeks_required))

            else:
                print("Some error occured at Building the Category !!! ")
                print("Please check your entries !!! ")
                return False

            # print("[build the category] category_general", Category_general)
            return Category_general

    # print(Category[0].time_required)
    # print(Category_general[0].time_required)

    # TODO: check this function later, you are not using it now.

    def choose_category(self):
        """
		This function takes the current Category Class and prints them.
		:return: Returns the chosen category with its properties
		"""

        print("[choose category]Choose the topic you want to study!!")
        print("[Choose category] The categories...")

        # if len(Category_general) == 0:
        #	Category_general = self.read_the_categories()

        #  TODO: if the categories is empty, it doesnt print here nothing even if you add one at "Build Category"
        for i, categ in enumerate(Category_general):  # Category.category_names
            # print("[choose category] categ", categ)
            print("[choose category]", i, categ.category_name)

        c = int(input("[choose category]put the number of the category "))
        print(
            f"[the chosen category] is \n {c}, {Category_general[c].category_name}")  # listenin ilk elemanı, type: str
        return Category_general[c]  # burada da seçilen kategoriyi liste olarak aldık

    def store_categories(self, flag):
        # takes the category and stores it into a file and recovers it back when the program starts
        """
		Now this function stores categories when they are entered
		"""

        i = 0

        print("\n entering to the store_categories\n")

        file_exists = os.path.isfile("categories.csv")

        with open("categories.csv", 'a') as f:
            headers = ["category_name", "time_required", "req_minutesPerWeek", "time_spentPerWeek", "total_weeks",
                       "daily_sum"]
            writer = csv.DictWriter(f, delimiter=',', lineterminator='\n', fieldnames=headers)

            if not file_exists:
                writer.writeheader()  # file doesn't exist yet, write a header

            # print("[store categories] Category_general", Category_general)

            point = len(Category_general)

            if self.check_categories(Category_general[point - 1].category_name, line_number=point - 1) is True:
                writer.writerow(
                    {'category_name': Category_general[point - 1].category_name,
                     'time_required': Category_general[point - 1].time_required,
                     'req_minutesPerWeek': Category_general[point - 1].req_minutes,
                     'time_spentPerWeek': Category_general[point - 1].time_spent,
                     'total_weeks': Category_general[point - 1].final_date,
                     'daily_sum': Category_general[point - 1].daily_sum
                     })
                print("\nStoring is successful\n")
            else:
                print("[store categories, for loop]some error occurred!!")

                """	if category_flag == 1: # meaning it is safe to store the new category
					pass
				else:
					print("[store_categories] Category couldn't stored!")
				"""
        # i += 1
        return True

    def read_from_records(self, time_stamp=None, week_flag=False):
        # TODO: you left here, with the following 2 functions
        # TODO: record the time to the pomodoro_records and afterwards record them to the categories.csv
        """
            This function reads the recorded pomodoro time values and
			add them together for a week and writes them in the "time_spentPerWeek".
			substract it from the "req_minutesPerWeek" and

		:parameter:
            time_stamp : date interval of the record, like a range of week or a day
		"""
        # time_stamp = '2022-05-25'
        print('timeStamp', time_stamp)
        total = 0
        temp = [[0 for x in range(1)] for y in range(1)]  # Record the values to sum up
        print('temp:', temp)
        pomo_data = pd.read_csv("pomodoro_records.csv")
        # print(pomo_data)

        unique, indexes, counts = np.unique(pomo_data.work_type, return_counts=True, return_index=True)
        print(f'uniques:{unique}, \nindexes:{indexes}, \ncounts:{counts} ')
        # print(pomo_data.columns)

        # read from the records
        for i, uniq in enumerate(unique):

            # if time is a constraint, work here
            if time_stamp is not None:

                # from 2nd column to length of pomo_data
                for j in range(1, pomo_data.shape[0]):  # number of rows

                    if uniq == pomo_data.work_type[j] and time_stamp == pomo_data.date[j]:
                        # print(pomo_data.work_type[j], '\n',pomo_data.date[j])
                        # print(uni, j)
                        total += pomo_data.iloc[j, 2]

                if total != 0:
                    # TODO: add the value to the related column of the related category
                    print('recorded to a file')

                temp.append([uniq, total])
                total = 0

            # if time is not a constraint, work here
            else:
                # from 2nd column to length of pomo_data
                for j in range(1, pomo_data.shape[0]):  # number of rows
                    if uniq == pomo_data.work_type[j]:
                        # print(uni, j)
                        total += pomo_data.iloc[j, 2]

                # temp.append([uniq, total])
                temp.append([uniq, total])
                print(temp)
                total = 0

        print("temp:\n", temp)  # the result is "temp"

        return temp

    def calculate_by_time(self, time_info=None):
        """
		This function only checks for the time and when it is called, it calls the read_from_records(self)
		function sum all the records based on the time interval. If that day/week already calculated it doesn't
		calculate again. it stores the daily sums to update "time_spentPerWeek" weekly.
		And makes the daily sum zero again.

		:returns matrix of consists of tuples of work_type and total time
		"""
        # TODO: get the day information
        # TODO: get the week information
        # TODO: first run by day to fill the daily_sum, if a week changes then run by week_flag=True

        # may be, have a list of weekdays and remove them day by day.

        # Get the current date and parse it by seperating from '-'
        current_date = datetime.date.today()
        current_date_s = str(current_date).split('-')

        # get the numbers of each element, as string
        cur_year_num = current_date_s[0]
        cur_month_num = current_date_s[1]
        cur_day_num = current_date_s[2]
        cur_week_num = datetime.date(int(current_date_s[0]),
                                     int(current_date_s[1]),
                                     int(current_date_s[2])).isocalendar()[1]

        while True:
            # next_week_num = cur_week_num
            next_day_num = cur_day_num

            if cur_day_num == next_day_num:

                self.read_from_records(time_stamp=str(current_date), week_flag=False)
                next_day_num = str(datetime.date.today()).split('-')
                next_day_num = next_day_num[2]

            else:
                raise "Unexpected error at calculate_by_time() "

            # time.sleep(5)  # wait for an hour


###  to test this file, use the following
if __name__ == "__main__":
    Category.read_from_records(Category)
